<snippet>
    <content><![CDATA[
// Gulp dependencies
const gulp = require("gulp"),
    sass = require("gulp-sass"),
    cleanCss = require("gulp-clean-css"),
    sourcemaps = require("gulp-sourcemaps"),
    rename = require("gulp-rename"),
    uglify = require("gulp-uglify"),
    plumber = require("gulp-plumber"),
    
    // JS build dependencies
    rollup = require("rollup-stream"),
    rollupBabel = require("rollup-plugin-babel"),
    rollupIncludePaths = require("rollup-plugin-includepaths"),
    vinylSource = require("vinyl-source-stream"),
    vinylBuffer = require("vinyl-buffer"),
    
    // Other dependencies
    minimist = require("minimist"),
    minimistOpts = require("minimist-options"),
    server = require("live-server"),
    runSequence = require("run-sequence"),
    del = require("del");

// Environment flags.
var env = {
    // Environment paths.
    PATH: {${1}${0}
        // Source paths.
        SRC: {
            // Generic build source path root.
            ROOT: "src",
            
            // SASS build source path.
            SASS: "sass",
            
            // JS build source path.
            JS: "js"
        },
        
        // Destination output paths.
        DEST: {
            // Generic build output path root.
            ROOT: "dist",
            
            // SASS build output path.
            SASS: "css",
            
            // JS build output path.
            JS: "js"
        }
    },
    
    // Argument configuration.
    ARG_OPTS: {},
    
    // Object containing command line arguments.
    args: null,
    
    // Flag to specify that the current task sequence is for production.
    prodMode: false
},
    
    // Collection of task handler functions.
    tasks = {
        /* Makes all subsequent tasks run in production mode (if supported).
        */
        "prod-mode": function() {
            env.prodMode = true;
        },
        
        /* Watches the project for changes and recompiles.
        */
        watch: function() {
            gulp.watch(env.PATH.SRC.SASS + "/**/*.scss", [ "sass" ]);
            gulp.watch(env.PATH.SRC.JS + "/**/*.js", [ "js" ]);
        },
        
        /* Clears the build destination directories for a clean build.
        */
        clean: function() {
            return del([
                env.PATH.DEST.SASS + "/**/*",
                env.PATH.DEST.JS + "/**/*"
            ]);
        },
        
        /* SASS build task.
        */
        sass: function() {
            console.log("Compiling stylesheets...");
            
            var target = getArgs("target"),
                action = gulp.src(env.PATH.SRC.SASS + "/" + target + ".scss");
            
            if (!env.prodMode) {
                action = action.pipe(sourcemaps.init());
            }
            
            action = action.pipe(sass().on("error", sass.logError))
                .pipe(cleanCss());
            
            if (!env.prodMode) {
                action = action.pipe(sourcemaps.write());
            }
            
            action = action.pipe(rename(target + ".css"))
                .pipe(gulp.dest(env.PATH.DEST.SASS));
            
            return action;
        },
        
        /* JS build task.
        */
        js: function() {
            console.log("Compiling scripts...");
            
            var target = getArgs("target"),
                action;
            
            action = plumber({
                errorHandler: function(err) {
                    console.log(err);
                    this.emit("end");
                }
            })
                .pipe(rollup({
                    entry: env.PATH.SRC.JS + "/index-" + target + ".js",
                    format: "iife",
                    sourceMap: true,
                    plugins: [
                        rollupIncludePaths({
                            paths: [ env.PATH.SRC.JS ]
                        }),
                        rollupBabel({
                            presets: [ "es2015-rollup" ],
                            plugins: [
                                "transform-es2015-parameters",
                                "transform-class-properties",
                                [ "babel-plugin-transform-builtin-extend", {
                                    globals: [ "Error" ]
                                } ],
                                [ "babel-root-import", {
                                    rootPathSuffix: env.PATH.SRC.JS
                                } ]
                            ],
                            sourceMaps: true
                        })
                    ]
                }))
                
                // Buffer for sourcemaps
                .pipe(vinylSource(target + ".js", env.PATH.SRC.JS))
                .pipe(vinylBuffer())
                .pipe(sourcemaps.init({ loadMaps: true }));
            
            // Only minify on non-dev builds
            if (env.prodMode) {
                action.pipe(uglify());
            }
            
            action.pipe(rename(target + ".bundle.js"))
                .pipe(sourcemaps.write("."))
                .pipe(gulp.dest(env.PATH.DEST.JS));
            
            return action;
        },
        
        // Complete build task.
        build: [ "sass", "js" ],
        
        /* Production build task.
        */
        deploy: function() {
            runSequence("clean", "prod-mode", "build");
        },
        
        /* Live development server task.
        */
        server: function() {
            runSequence("build", "watch");
            
            var target = getArgs("target"),
                root = env.PATH.DEST.ROOT;
            
            server.start({
                port: 8080,
                host: "localhost",
                root: "app",
                file: "app/" + target + ".html",
                open: false,
                wait: 250,
                watch: [ "app/**" ]
            });
        },
        
        //
        // Aliases
        //
        
        w: [ "watch" ],
        s: [ "server" ],
        
        // Default gulp task.
        "default": [ "server" ]
    };

/* Gets one or all command line arguments.
    
    arg - Specific argument name to retrieve. If omitted, all arguments are
        returned.
    
    Returns a single argument value, or an object containing all arguments and
    their values.
*/
function getArgs(arg) {
    env.args = env.args || minimist(process.argv.slice(2),
        minimistOpts(env.ARG_OPTS));
    
    return arg ? env.args[arg] : env.args;
}

// Set up paths
(function() {
    var paths = env.PATH,
        groups = [ "SRC", "DEST" ],
        group, root, path, k, i, l;
    
    for (i=0, l=groups.length; i<l; ++i) {
        group = env.PATH[groups[i]];
        root = group.ROOT = group.ROOT.replace(/\/+\$/, "");
        
        for (k in group) {
            if (!group.hasOwnProperty(k) || "ROOT" === k) { continue; }
            
            path = group[k].replace(/^\/+/, "");
            group[k] = root + "/" + path;
        }
    }
})();

// Link tasks with handlers
(function() {
    var curr, k;
    
    for (k in tasks) {
        if (tasks.hasOwnProperty(k)) {
            curr = tasks[k];
            
            if (curr.pre instanceof Array && typeof curr.task === "function") {
                // Special case, handler with pre-tasks
                gulp.task(k, curr.pre, curr.task);
            }
            else {
                // Normal case, handler or task list
                gulp.task(k, curr);
            }
        }
    }
})();
]]></content>
    <!-- Optional: Tab trigger to activate the snippet -->
    <tabTrigger>///gulpfile</tabTrigger>
    <!-- Optional: Scope the tab trigger will be active in -->
    <scope>source.js, source.jsx, source.ts, source.tsx</scope>
    <!-- Optional: Description to show in the menu -->
    <description>Gulpfile boilerplate</description>
</snippet>
