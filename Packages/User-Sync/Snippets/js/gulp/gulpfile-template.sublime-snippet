<snippet>
    <content><![CDATA[
// Gulp dependencies
const gulp = require("gulp"),
    sourcemaps = require("gulp-sourcemaps"),
    rename = require("gulp-rename"),
    uglify = require("gulp-uglify"),
    plumber = require("gulp-plumber"),
    
    // JS build dependencies
    rollup = require("rollup-stream"),
    rollupBabel = require("rollup-plugin-babel"),
    rollupIncludePaths = require("rollup-plugin-includepaths"),
    vinylSource = require("vinyl-source-stream"),
    vinylBuffer = require("vinyl-buffer"),
    
    // Other dependencies
    pkg = require("./package.json"),
    server = require("live-server"),
    runSequence = require("run-sequence"),
    del = require("del");

// Environment flags.
var env = {
    // Build source path.
    SRC_DIR: "${1:src}",
    
    // Build output path.
    DEST_DIR: "${2:dist}",
    
    // Flag to specify that the current task sequence is for production.
    prodMode: false
},
    
    // Collection of task handler functions.
    tasks = {${0}
        /* Makes all subsequent tasks run in production mode (if supported).
        */
        "prod-mode": function() {
            env.prodMode = true;
        },
        
        /* Watches the project for changes and recompiles.
        */
        watch: function() {
            gulp.watch(env.SRC_DIR + "/**/*.js", [ "js" ]);
        },
        
        /* Clears the build destination directories for a clean build.
        */
        clean: function() {
            return del([ env.DEST_DIR + "/**/*" ]);
        },
        
        /* JS build task.
        */
        js: function() {
            console.log("Compiling scripts...");
            
            var action = plumber({
                errorHandler: function(err) {
                    console.log(err);
                    this.emit("end");
                }
            })
                .pipe(rollup({
                    entry: env.SRC_DIR + "/index.js",
                    format: "iife",
                    sourceMap: true,
                    plugins: [
                        rollupIncludePaths({
                            paths: [ env.SRC_DIR ]
                        }),
                        rollupBabel({
                            presets: [ "es2015-rollup" ],
                            plugins: [
                                "transform-es2015-parameters",
                                "transform-class-properties",
                                [ "babel-plugin-transform-builtin-extend", {
                                    globals: [ "Error" ]
                                } ],
                                [ "babel-root-import", {
                                    rootPathSuffix: env.SRC_DIR
                                } ]
                            ],
                            sourceMaps: true
                        })
                    ]
                }))
                
                // Buffer for sourcemaps
                .pipe(vinylSource("index.js", env.SRC_DIR))
                .pipe(vinylBuffer())
                .pipe(sourcemaps.init({ loadMaps: true }));
            
            // Only minify on non-dev builds
            if (env.prodMode) {
                action.pipe(uglify());
            }
            
            action.pipe(rename(pkg.name + (env.prodMode ? ".min" : "") + ".js"))
                .pipe(sourcemaps.write("."))
                .pipe(gulp.dest(env.DEST_DIR));
            
            return action;
        },
        
        // Complete build task.
        build: [ "js" ],
        
        /* Production build task.
        */
        deploy: function() {
            runSequence("clean", "prod-mode", "build");
        },
        
        /* Live development server task.
        */
        server: function() {
            runSequence("build", "watch");
            
            server.start({
                port: 8080,
                host: "localhost",
                file: "test/index.html",
                open: false,
                watch: env.DEST_DIR
            });
        },
        
        //
        // Aliases
        //
        
        w: [ "watch" ],
        s: [ "server" ],
        
        // Default gulp task.
        "default": [ "server" ]
    },
    
    // Iterator containers.
    curr, k;

// Link tasks with handlers
for (k in tasks) {
    if (tasks.hasOwnProperty(k)) {
        curr = tasks[k];
        
        if (curr.pre instanceof Array && typeof curr.task === "function") {
            // Special case, handler with pre-tasks
            gulp.task(k, curr.pre, curr.task);
        }
        else {
            // Normal case, handler or task list
            gulp.task(k, curr);
        }
    }
}
]]></content>
    <!-- Optional: Tab trigger to activate the snippet -->
    <tabTrigger>///gulpfile</tabTrigger>
    <!-- Optional: Scope the tab trigger will be active in -->
    <scope>source.js</scope>
    <!-- Optional: Description to show in the menu -->
    <description>Gulpfile Boilerplate Template</description>
</snippet>
